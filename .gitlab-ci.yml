image: docker:stable

stages:
  - prepare
  - create
  - check
  - test
  - distribute
  - clean

variables:
  BASE_IMAGE: $CI_REGISTRY_IMAGE/base
  TESTER_IMAGE: $CI_REGISTRY_IMAGE/tester
  PACKER_IMAGE: $CI_REGISTRY_IMAGE/packer

services:
  - docker:stable-dind

base:
  stage: prepare
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $BASE_IMAGE --target=base .
    - docker push $BASE_IMAGE
  resource_group: build
  only:
    refs:
      - main
      - merge_requests
    changes:
      - Dockerfile
      - .gitlab-ci.yml

tester:
  stage: create
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build --cache-from $BASE_IMAGE --cache-from $TESTER_IMAGE -t $TESTER_IMAGE --target=tester .
    - docker push $TESTER_IMAGE
  resource_group: build
  only:
    refs:
      - main
      - merge_requests
    changes:
      - Dockerfile
      - .gitlab-ci.yml
      - requirements/constraints.txt
      - requirements/base.txt
      - requirements/test.txt

packer:
  stage: create
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $BASE_IMAGE || true
    - docker pull $PACKER_IMAGE || true
  script:
    - docker build --cache-from $BASE_IMAGE --cache-from $PACKER_IMAGE -t $PACKER_IMAGE --target=packer .
    - docker push $PACKER_IMAGE
  only:
    refs:
      - main
      - merge_requests
    changes:
      - Dockerfile
      - .gitlab-ci.yml
      - requirements/constraints.txt
      - requirements/pypi.txt

stylelint:
  stage: check
  image: pipelinecomponents/stylelint:0.9.0
  variables:
    STYLELINTRC_PATH: https://raw.githubusercontent.com/raccoongang/frontend/master/.stylelintrc
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - curl $STYLELINTRC_PATH > .stylelintrc
  script:
    - stylelint '**/*.scss' --config .stylelintrc --allow-empty-input
  only:
    - main
    - merge_requests

quality:
  stage: check
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $TESTER_IMAGE
  script:
    - docker run --rm -v ${PWD}:/app $TESTER_IMAGE make quality
  only:
    - main
    - merge_requests

backend:
  stage: test
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $TESTER_IMAGE
  script:
    - docker run --rm -v ${PWD}:/app $TESTER_IMAGE make test
  only:
    - main
    - merge_requests
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

versions:
  stage: check
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $BASE_IMAGE || true
  script:
    - docker run --rm -v ${PWD}:/app -e CI_COMMIT_TAG=$CI_COMMIT_TAG $BASE_IMAGE python check_version.py
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - base

project pypi:
  stage: distribute
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $PACKER_IMAGE || true
  script:
    - docker run --rm -v ${PWD}:/app -e CI_JOB_TOKEN -e CI_PROJECT_ID -e CI_API_V4_URL $PACKER_IMAGE make pypi
  rules:
    - if: $CI_COMMIT_TAG
